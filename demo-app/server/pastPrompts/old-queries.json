{
  "please return han solo from the database": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Here is the schema of the database:",
      "returnedQuery": "```sql\nSELECT * FROM people WHERE name = 'Han Solo';\n```"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Here is the schema of the database:",
      "returnedQuery": "```sql\nSELECT * FROM people WHERE name = 'Han Solo';\n```"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Here is the schema of the database:",
      "returnedQuery": "sql SELECT  FROM people WHERE name = 'Han Solo';"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Here is the schema of the database:",
      "returnedQuery": "sql SELECT * FROM people WHERE name = 'Han Solo';"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Here is the schema of the database:",
      "returnedQuery": "SELECT * FROM people WHERE name = 'Han Solo';"
    }
  ],
  "We need the planet of the women with black hair and brown eyes": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Here is the schema of the database:",
      "returnedQuery": "SELECT DISTINCT p.name FROM planets p JOIN people pe ON p.id = pe.homeworldid WHERE pe.haircolor = 'black' AND pe.eyecolor = 'brown' AND pe.gender = 'female';"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Here is the schema of the database:",
      "returnedQuery": "SELECT DISTINCT planets.name FROM people JOIN planets ON people.homeworld_id = planets._id WHERE people.hair_color = 'black' AND people.eye_color = 'brown' AND people.gender = 'female';"
    }
  ],
  "What is the name of the droid with red eyes from the planet Tatooine": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Here is the schema of the database:",
      "returnedQuery": "To identify the name of the droid with red eyes from the planet Tatooine, we need to join the people, planets, and species tables, filtering by the eye_color and homeworld attributes. Here's the  query: SELECT p.name FROM people p JOIN species s ON p.species_id = s._id JOIN planets pl ON p.homeworld_id = pl._id WHERE p.eye_color = 'red'   AND pl.name = 'Tatooine'   AND s.classification = 'droid';"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Only include the SQL in the response, without any additional text or explanation.\n        The response should be a string not markdown.\n        Here is the schema of the database:",
      "returnedQuery": "```sql\nSELECT people.name \nFROM people \nJOIN planets ON people.homeworld_id = planets._id \nWHERE planets.name = 'Tatooine' \nAND people.eye_color = 'red' \nAND people.species_id = (\n    SELECT _id \n    FROM species \n    WHERE classification = 'droid'\n);\n```"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Only include the SQL in the response, without any additional text or explanation.\n        The response should be a string and valid SQL.\n        Here is the schema of the database:",
      "returnedQuery": "SELECT p.name FROM people p JOIN species s ON p.species_id = s._id JOIN planets planet ON p.homeworld_id = planet._id WHERE s.name = 'Droid' AND p.eye_color = 'red' AND planet.name = 'Tatooine';"
    }
  ],
  "What is the name of the droid with red eyes from the planet of the women with black hair and brown eyes": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Only include the SQL in the response, without any additional text or explanation.\n        The response should be a string and valid SQL.\n        Here is the schema of the database:",
      "returnedQuery": "SELECT p1.name FROM people p1 JOIN people p2 ON p1.homeworld_id = p2.homeworld_id JOIN species s1 ON p1.species_id = s1._id JOIN species s2 ON p2.species_id = s2._id WHERE s1.name = 'Droid' AND p1.eye_color = 'red' AND p2.hair_color = 'black' AND p2.eye_color = 'brown';"
    }
  ],
  "return r2-d2 from the database\n": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Only include the SQL in the response, without any additional text or explanation.\n        The response should be a string and valid SQL.\n        Here is the schema of the database:",
      "returnedQuery": "SELECT * FROM people WHERE name = 'R2D2';"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Only include the SQL in the response, without any additional text or explanation.\n        The response should be a string and valid SQL.\n        Here is the schema of the database:",
      "returnedQuery": "SELECT * FROM people WHERE name = 'R2-D2';"
    }
  ],
  "return homeworld id 8\n\n": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Only include the SQL in the response, without any additional text or explanation.\n        The response should be a string and valid SQL.\n        Here is the schema of the database:",
      "returnedQuery": "SELECT * FROM planets WHERE _id = 8;"
    }
  ],
  "there is a women with black hair and brown eyes, find her planet then tell me what is the name of the droid with red eyes from her planet\n\n": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        Generate a SQL query based on the user's input.\n        Only include the SQL in the response, without any additional text or explanation.\n        The response should be a string and valid SQL.\n        Here is the schema of the database:",
      "returnedQuery": "SELECT droids.name FROM people AS women JOIN planets ON women.homeworld_id = planets._id JOIN people AS droids ON droids.homeworld_id = planets._id JOIN species ON droids.species_id = species._id WHERE women.gender = 'female'    AND women.hair_color = 'black'    AND women.eye_color = 'brown'    AND species.name = 'Droid'    AND droids.eye_color = 'red';"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected.\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT droids.name FROM people AS women JOIN planets ON women.homeworld_id = planets._id JOIN people AS droids ON droids.homeworld_id = planets._id JOIN species ON droids.species_id = species._id WHERE    women.gender = 'female'    AND women.hair_color = 'black'    AND women.eye_color = 'brown'   AND species.name = 'Droid'   AND droids.eye_color = 'red';"
    }
  ],
  "What is the name of the droid with red eyes from the planet of the women with black hair and brown eyes\n\n": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected.\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT p.name FROM people p JOIN species s ON p.species_id = s._id JOIN planets pl ON p.homeworld_id = pl._id WHERE p.species_id IN (   SELECT DISTINCT s2._id   FROM species s2   JOIN people p2 ON s2._id = p2.species_id   WHERE p2.hair_color = 'black' AND p2.eye_color = 'brown' AND p2.gender = 'female' ) AND p.eye_color = 'red' AND s.name = 'Droid';"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT p.name AS droid_name FROM people p JOIN species s ON p.species_id = s._id JOIN planets pl ON s.homeworld_id = pl._id WHERE p.eye_color = 'red'  AND LOWER(s.name) = 'droid' AND p.homeworld_id = (     SELECT DISTINCT p2.homeworld_id     FROM people p2     WHERE p2.gender = 'female'      AND p2.hair_color = 'black'      AND p2.eye_color = 'brown' );"
    }
  ],
  "What is the name of the droid with red eyes from leia's planet?\n": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT p.name FROM people p JOIN species s ON p.species_id = s._id JOIN planets pl ON p.homeworld_id = pl._id WHERE s.name = 'Droid' AND p.eye_color LIKE '%red%' AND pl.name = 'Alderaan';"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT p.name FROM people p JOIN species s ON p.species_id = s._id JOIN planets pl ON p.homeworld_id = pl._id WHERE p.eye_color ILIKE 'red'   AND s.name ILIKE 'droid'   AND pl.name ILIKE 'Alderaan';"
    }
  ],
  "what planet is leia from\n\n": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT planets.name FROM people JOIN planets ON people.homeworld_id = planets._id WHERE people.name = 'Leia Organa';"
    }
  ],
  "what is the women's name with black hair and brown eyes\n": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT name  FROM people  WHERE hair_color = 'black'    AND eye_color = 'brown'    AND gender = 'female';"
    }
  ],
  "What is the name of the droid with red eyes from the planet of Shmi Skywalker": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT people.name  FROM people  JOIN planets ON people.homeworld_id = planets._id WHERE people.species_id IN (     SELECT _id FROM species     WHERE name = 'Droid' AND eye_colors LIKE '%red%' ) AND planets.name = 'Shmi Skywalker';"
    }
  ],
  "What is the name of the droid with red eyes from the same planet as Shmi Skywalker": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT p.name FROM people p JOIN species s ON p.species_id = s._id JOIN people shmi ON p.homeworld_id = shmi.homeworld_id WHERE s.name = 'Droid' AND p.eye_color = 'red' AND shmi.name = 'Shmi Skywalker';"
    }
  ],
  "What is the name of the droid with red eyes from the same planet as the woman with black hair and brown eyes": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT p.name FROM people p JOIN species s ON p.species_id = s._id WHERE p.eye_color = 'red' AND s.name = 'Droid' AND p.homeworld_id =      (SELECT p2.homeworld_id      FROM people p2      WHERE p2.hair_color = 'black' AND p2.eye_color = 'brown' AND p2.gender = 'female')"
    }
  ],
  "Who is the sullustan who pilots the vessel with the tallest character in the film": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "WITH TallestCharacter AS (     SELECT p._id AS person_id, pil.vessel_id     FROM people p     JOIN people_in_films pf ON p._id = pf.person_id     JOIN films f ON pf.film_id = f._id     JOIN pilots pil ON p._id = pil.person_id     WHERE p.height = (         SELECT MAX(height)         FROM people p2         JOIN people_in_films pf2 ON p2._id = pf2.person_id         JOIN films f2 ON pf2.film_id = f2._id         WHERE f2._id = f._id     ) ), SullustanPilot AS (     SELECT DISTINCT pil.person_id"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n\n        Here are some examples for reference as you break down the steps:\n\n        These three prompts should have generated the same response.\n        The first did not generate a correctly formed SQL response:\n        \n        PROMPT1: \"What is the name of the droid with red eyes from the planet of the women with black hair and brown eyes\"\n        generated this incorrect response:\n        \"SELECT p1.name \n        FROM people p1 \n        JOIN people p2 ON p1.homeworld_id = p2.homeworld_id \n        JOIN species s1 ON p1.species_id = s1._id \n        JOIN species s2 ON p2.species_id = s2._id \n        WHERE s1.name = 'Droid' \n        AND p1.eye_color = 'red' \n        AND p2.hair_color = 'black' \n        AND p2.eye_color = 'brown';\"\n\n\n        This wording did generate a correct response:\n        PROMPT2: \"What is the name of the droid with red eyes from the same planet as the woman with black hair and brown eyes\"\n        generated this correct response:\n        \"SELECT p.name \n        FROM people p \n        JOIN species s ON p.species_id = s._id \n        WHERE p.eye_color = 'red' \n        AND s.name = 'Droid' \n        AND p.homeworld_id =      \n        (SELECT p2.homeworld_id      \n        FROM people p2      \n        WHERE p2.hair_color = 'black' \n        AND p2.eye_color = 'brown' A\n        ND p2.gender = 'female')\"\n\n        This wording did generate a correct response:\n        PROMPT3: \"there is a women with black hair and brown eyes, find her planet then tell me what is the name of the droid with red eyes from her planet\"\n        Generated this correct response:\n        \"SELECT droids.name \n        FROM people AS women \n        JOIN planets ON women.homeworld_id = planets._id \n        JOIN people AS droids ON droids.homeworld_id = planets._id \n        JOIN species ON droids.species_id = species._id \n        WHERE women.gender = 'female'    \n        AND women.hair_color = 'black'    \n        AND women.eye_color = 'brown'    \n        AND species.name = 'Droid'    \n        AND droids.eye_color = 'red';\"\n\n\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT p.name FROM pilots pil JOIN people p ON pil.person_id = p._id JOIN vessels v ON pil.vessel_id = v._id WHERE p.species_id = (SELECT _id FROM species WHERE name = 'Sullustan') AND pil.vessel_id = (     SELECT pil_sub.vessel_id     FROM pilots pil_sub     JOIN people p_sub ON pil_sub.person_id = p_sub._id     WHERE p_sub.height = (         SELECT MAX(p3.height)         FROM people p3         JOIN people_in_films pf ON p3._id = pf.person_id         WHERE pf.film_id = (             SELECT film_id             FROM people_in_films             WHERE person_id = p._id             LIMIT 1         )     ) );"
    }
  ],
  "give me all of the sullustans from the planet sullast\n": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT people.name  FROM people JOIN species ON people.species_id = species._id JOIN planets ON people.homeworld_id = planets._id WHERE species.name = 'Sullustan' AND planets.name = 'Sullust';"
    }
  ],
  "The Sullustan tells you that he was co-piloting the Millenium Falcon when they outmaneuvered a bounty hunter in a starship that had a hyperdrive rating six times higher than the ‘Falcon. If that bounty hunter isn’t our target, odds are that they will know who your target is.\n-Q: Who is the bounty hunter?": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT p.name  FROM people p JOIN pilots pl ON p._id = pl.person_id JOIN vessels v ON pl.vessel_id = v._id JOIN starship_specs ss ON v._id = ss.vessel_id WHERE ss.hyperdrive_rating::float = (     SELECT ss2.hyperdrive_rating::float * 6     FROM starship_specs ss2     JOIN vessels v2 ON ss2.vessel_id = v2._id     WHERE v2.name = 'Millenium Falcon' );"
    }
  ],
  "give the pilot of the ship with a hyper-drive that is six times faster than the millennium falcon's": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT p.name  FROM pilots pi JOIN people p ON pi.person_id = p._id JOIN starship_specs ss ON pi.vessel_id = ss.vessel_id WHERE ss.hyperdrive_rating = '0.5';"
    },
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n\n        Here are some examples for reference as you break down the steps:\n\n        These three prompts should have generated the same response.\n        The first did not generate a correctly formed SQL response:\n        \n        PROMPT1: \"What is the name of the droid with red eyes from the planet of the women with black hair and brown eyes\"\n        generated this incorrect response:\n        \"SELECT p1.name \n        FROM people p1 \n        JOIN people p2 ON p1.homeworld_id = p2.homeworld_id \n        JOIN species s1 ON p1.species_id = s1._id \n        JOIN species s2 ON p2.species_id = s2._id \n        WHERE s1.name = 'Droid' \n        AND p1.eye_color = 'red' \n        AND p2.hair_color = 'black' \n        AND p2.eye_color = 'brown';\"\n\n\n        This wording did generate a correct response:\n        PROMPT2: \"What is the name of the droid with red eyes from the same planet as the woman with black hair and brown eyes\"\n        generated this correct response:\n        \"SELECT p.name \n        FROM people p \n        JOIN species s ON p.species_id = s._id \n        WHERE p.eye_color = 'red' \n        AND s.name = 'Droid' \n        AND p.homeworld_id =      \n        (SELECT p2.homeworld_id      \n        FROM people p2      \n        WHERE p2.hair_color = 'black' \n        AND p2.eye_color = 'brown' A\n        ND p2.gender = 'female')\"\n\n        This wording did generate a correct response:\n        PROMPT3: \"there is a women with black hair and brown eyes, find her planet then tell me what is the name of the droid with red eyes from her planet\"\n        Generated this correct response:\n        \"SELECT droids.name \n        FROM people AS women \n        JOIN planets ON women.homeworld_id = planets._id \n        JOIN people AS droids ON droids.homeworld_id = planets._id \n        JOIN species ON droids.species_id = species._id \n        WHERE women.gender = 'female'    \n        AND women.hair_color = 'black'    \n        AND women.eye_color = 'brown'    \n        AND species.name = 'Droid'    \n        AND droids.eye_color = 'red';\"\n\n\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT p.name FROM people p JOIN pilots pilot ON p._id = pilot.person_id JOIN vessels v ON pilot.vessel_id = v._id JOIN starship_specs ss ON v._id = ss.vessel_id WHERE ss.hyperdrive_rating::float =      (SELECT 6 * ss1.hyperdrive_rating::float       FROM starship_specs ss1       JOIN vessels v1 ON ss1.vessel_id = v1._id       WHERE v1.name = 'Millennium Falcon');"
    }
  ],
  "give me a list of the vessels with their hyperdrive ratings\n": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT v.name, v.manufacturer, v.model, v.vessel_type, v.vessel_class, s.hyperdrive_rating FROM vessels v JOIN starship_specs s ON v._id = s.vessel_id;"
    }
  ],
  "who is the pilot of slave-1\n": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT people.name FROM people JOIN pilots ON people._id = pilots.person_id JOIN vessels ON pilots.vessel_id = vessels._id WHERE vessels.name = 'Slave-1';"
    }
  ],
  "find the milenium falcon's hypredrive rating, then find the vessel that is six times higher, finally tell me the pilot of the vessel that is six times higher": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n        Here is the database schema:\n        ",
      "returnedQuery": "WITH millenium_falcon_hyperdrive AS (     SELECT ss.hyperdrive_rating::numeric AS hyperdrive_rating     FROM vessels v     JOIN starship_specs ss ON v._id = ss.vessel_id     WHERE v.name = 'Millennium Falcon' ), higher_hyperdrive_vessel AS (     SELECT v._id AS vessel_id, v.name AS vessel_name     FROM vessels v     JOIN starship_specs ss ON v._id = ss.vessel_id     WHERE ss.hyperdrive_rating::numeric = (         SELECT hyperdrive_rating * 6 FROM millenium_falcon_hyperdrive     ) ) SELECT p.name AS pilot_name, hhv.vessel_name FROM pilots pl JOIN higher_hyperdrive_vessel hhv ON pl.vessel_id = hhv.vessel_id JOIN people p ON pl.person_id = p._id;"
    }
  ],
  "The Sullustan tells you that he was co-piloting the Millenium Falcon when they outmaneuvered a bounty hunter in a starship that had a hyperdrive rating six times higher than the ‘Falcon. If that bounty hunter isn’t our target, odds are that they will know who your target is. Q: Who is the bounty hunter?": [
    {
      "systemContent": "You're a backend database software engineer that needs to take a human language prompt and generate a SQL query using only the provided schema. \n        You will be querying a PostgreSQL database containing data about Star Wars. \n        For every request, first break the query into logical steps or subtasks. Think through:\n\n          1. What data needs to be selected and what entity or entities in the database schema the user is asking for in the return value (For example, ask yourself is the user asking for a person's name, or a planet, or a species, etc.).\n          2. Which tables are involved.\n          3. How the tables are related (JOINs).\n          4. What filters or conditions apply.\n          5. How the data should be grouped or ordered.\n          6. Any derived values, subqueries, or aggregations needed.\n          7. Do not make any assumptions based on your previous star wars related knowledge.\n\n        Once you've planned out the logic in your head, write only the final SQL query. Do not include the planning in the output — just use it to improve accuracy.\n\n        Here are some examples for reference as you break down the steps:\n\n        These three prompts should have generated the same response.\n        The first did not generate a correctly formed SQL response:\n        \n        PROMPT1: \"What is the name of the droid with red eyes from the planet of the women with black hair and brown eyes\"\n        generated this incorrect response:\n        \"SELECT p1.name \n        FROM people p1 \n        JOIN people p2 ON p1.homeworld_id = p2.homeworld_id \n        JOIN species s1 ON p1.species_id = s1._id \n        JOIN species s2 ON p2.species_id = s2._id \n        WHERE s1.name = 'Droid' \n        AND p1.eye_color = 'red' \n        AND p2.hair_color = 'black' \n        AND p2.eye_color = 'brown';\"\n\n\n        This wording did generate a correct response:\n        PROMPT2: \"What is the name of the droid with red eyes from the same planet as the woman with black hair and brown eyes\"\n        generated this correct response:\n        \"SELECT p.name \n        FROM people p \n        JOIN species s ON p.species_id = s._id \n        WHERE p.eye_color = 'red' \n        AND s.name = 'Droid' \n        AND p.homeworld_id =      \n        (SELECT p2.homeworld_id      \n        FROM people p2      \n        WHERE p2.hair_color = 'black' \n        AND p2.eye_color = 'brown' A\n        ND p2.gender = 'female')\"\n\n        This wording did generate a correct response:\n        PROMPT3: \"there is a women with black hair and brown eyes, find her planet then tell me what is the name of the droid with red eyes from her planet\"\n        Generated this correct response:\n        \"SELECT droids.name \n        FROM people AS women \n        JOIN planets ON women.homeworld_id = planets._id \n        JOIN people AS droids ON droids.homeworld_id = planets._id \n        JOIN species ON droids.species_id = species._id \n        WHERE women.gender = 'female'    \n        AND women.hair_color = 'black'    \n        AND women.eye_color = 'brown'    \n        AND species.name = 'Droid'    \n        AND droids.eye_color = 'red';\"\n\n\n        Here is the database schema:\n        ",
      "returnedQuery": "SELECT p.name  FROM people p JOIN pilots plt ON p._id = plt.person_id JOIN vessels v ON plt.vessel_id = v._id JOIN starship_specs ss ON v._id = ss.vessel_id WHERE v.name < 'Millennium Falcon' AND CAST(ss.hyperdrive_rating AS FLOAT) = 6 * (     SELECT CAST(ss_falcon.hyperdrive_rating AS FLOAT)      FROM vessels v_falcon     JOIN starship_specs ss_falcon ON v_falcon._id = ss_falcon.vessel_id     WHERE v_falcon.name = 'Millennium Falcon' );"
    }
  ]
}