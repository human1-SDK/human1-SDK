import React from 'react';
import { useNaturalLanguageQuery } from '../hooks/useNaturalLanguageQuery';
import { QueryInput } from '../components/QueryInput';
import { QueryResponseDisplay } from '../components/QueryResponseDisplay';

export default {
  title: 'Examples/UseQueryHook',
  parameters: {
    layout: 'padded',
  },
};

// Mock API client to simulate responses (in a real app, this would call your backend)
const mockApiClient = {
  query: async (query: string): Promise<any> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Return different results based on the query content
    if (query.toLowerCase().includes('sales')) {
      return {
        columns: ['Month', 'Region', 'Sales ($)'],
        rows: [
          ['January', 'North', 12500],
          ['January', 'South', 14800],
          ['February', 'North', 11000],
          ['February', 'South', 15200],
          ['March', 'North', 13800],
          ['March', 'South', 16100],
        ]
      };
    } 
    
    if (query.toLowerCase().includes('error')) {
      throw new Error('Query execution failed');
    }
    
    return {
      text: `Here's the answer to your question: "${query}"\n\nThis is a natural language response that would normally be generated by the model based on the data in your database. It can include multiple paragraphs and formatting.`
    };
  }
};

export const SimpleExample = () => {
  const {
    query,
    setQuery,
    result,
    isLoading,
    executeQuery,
    reset
  } = useNaturalLanguageQuery({
    client: mockApiClient,
    onSuccess: (result) => console.log('Query succeeded:', result),
    onError: (error) => console.error('Query failed:', error),
  });
  
  return (
    <div style={{ maxWidth: '800px', margin: '0 auto' }}>
      <h1 style={{ marginBottom: '20px' }}>Using the Query Hook</h1>
      
      <p style={{ marginBottom: '20px' }}>
        This example uses the <code>useNaturalLanguageQuery</code> hook to manage state and handle query execution.
      </p>
      
      <div style={{ display: 'flex', marginBottom: '20px' }}>
        <input
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="Enter your query"
          style={{
            flexGrow: 1,
            padding: '10px 16px',
            fontSize: '16px',
            border: '1px solid #ccc',
            borderRadius: '4px',
            marginRight: '10px',
          }}
        />
        <button
          onClick={() => executeQuery()}
          disabled={isLoading || !query.trim()}
          style={{
            padding: '10px 16px',
            backgroundColor: '#3498db',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: isLoading || !query.trim() ? 'not-allowed' : 'pointer',
            opacity: isLoading || !query.trim() ? 0.7 : 1,
          }}
        >
          {isLoading ? 'Loading...' : 'Execute Query'}
        </button>
        <button
          onClick={reset}
          style={{
            padding: '10px 16px',
            backgroundColor: '#e0e0e0',
            color: 'black',
            border: 'none',
            borderRadius: '4px',
            marginLeft: '10px',
          }}
        >
          Reset
        </button>
      </div>
      
      {result && (
        <QueryResponseDisplay 
          data={result} 
          title="Query Results"
        />
      )}
      
      <div style={{ marginTop: '40px', padding: '16px', backgroundColor: '#f5f5f5', borderRadius: '4px' }}>
        <h3>Try these example queries:</h3>
        <ul>
          <li>"Show me the sales data by region"</li>
          <li>"What was our best performing month?"</li>
          <li>"Generate an error" (will show error handling)</li>
        </ul>
      </div>
    </div>
  );
};

export const CompleteExample = () => {
  const {
    query,
    setQuery,
    result,
    isLoading,
    executeQuery
  } = useNaturalLanguageQuery({
    client: mockApiClient,
    initialQuery: '',
    onBeforeQuery: (q) => {
      // You could add validation logic here
      console.log('About to execute query:', q);
      return true;
    }
  });
  
  return (
    <div style={{ maxWidth: '800px', margin: '0 auto' }}>
      <h1 style={{ marginBottom: '20px' }}>Complete Interface Example</h1>
      
      <p style={{ marginBottom: '20px' }}>
        This example combines the hook with the pre-built components.
      </p>
      
      <QueryInput 
        onSubmit={executeQuery}
        isLoading={isLoading}
        initialValue={query}
        placeholder="Ask a question about your data..."
      />
      
      {result && (
        <QueryResponseDisplay 
          data={result}
          title="Query Results" 
        />
      )}
      
      <div style={{ marginTop: '40px', padding: '16px', backgroundColor: '#f5f5f5', borderRadius: '4px' }}>
        <h3>Try these example queries:</h3>
        <ul>
          <li>"Show me the sales data by region"</li>
          <li>"What was our best performing month?"</li>
          <li>"Generate an error" (will show error handling)</li>
        </ul>
      </div>
    </div>
  );
}; 