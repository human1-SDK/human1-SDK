import React, { useState } from 'react';
import { QueryInput } from '../components/QueryInput';
import { QueryResponseDisplay } from '../components/QueryResponseDisplay';
import { ResponseData } from '../types';

export default {
  title: 'Examples/QueryInterface',
  component: QueryInput,
  parameters: {
    layout: 'padded',
  },
};

// Mock API client to simulate responses (in a real app, this would call your backend)
const mockApiClient = {
  query: async (query) => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Return different results based on the query content
    if (query.toLowerCase().includes('sales')) {
      return {
        columns: ['Month', 'Region', 'Sales ($)'],
        rows: [
          ['January', 'North', 12500],
          ['January', 'South', 14800],
          ['February', 'North', 11000],
          ['February', 'South', 15200],
          ['March', 'North', 13800],
          ['March', 'South', 16100],
        ]
      };
    } 
    
    if (query.toLowerCase().includes('error')) {
      throw new Error('Query execution failed');
    }
    
    return {
      text: `Here's the answer to your question: "${query}"\n\nThis is a natural language response that would normally be generated by the model based on the data in your database. It can include multiple paragraphs and formatting.`
    };
  }
};

export const BasicExample = () => {
  const [query, setQuery] = useState('');
  const [result, setResult] = useState<ResponseData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  
  const handleSubmit = async (queryText, type: 'paragraph' | 'table' = 'paragraph') => {
    setIsLoading(true);
    try {
      const response = await mockApiClient.query(queryText);
      
      // If the user wants a table and we have table data, or if the query suggests table data
      if ((type === 'table' && response.columns && response.rows) || 
          (queryText.toLowerCase().includes('sales') && response.columns && response.rows)) {
        setResult({
          type: 'table',
          data: {
            columns: response.columns,
            rows: response.rows
          }
        });
      } else if (response.text) {
        setResult({
          type: 'paragraph',
          data: {
            text: response.text
          }
        });
      }
    } catch (error) {
      setResult({
        type: 'error',
        data: {
          message: error instanceof Error ? error.message : 'An unknown error occurred',
          suggestions: [
            'Try rephrasing your question',
            'Check for typos in your query',
            'Use simpler language'
          ]
        }
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <div style={{ maxWidth: '800px', margin: '0 auto' }}>
      <h1 style={{ marginBottom: '20px' }}>Natural Language Database Query</h1>
      
      <QueryInput 
        onSubmit={handleSubmit} 
        isLoading={isLoading}
        placeholder="Ask a question about your data..."
        submitButtonLabel="Search"
      />
      
      {result && (
        <QueryResponseDisplay 
          data={result} 
          title="Query Results"
        />
      )}
      
      <div style={{ marginTop: '40px', padding: '16px', backgroundColor: '#f5f5f5', borderRadius: '4px' }}>
        <h3>Try these example queries:</h3>
        <ul>
          <li>"Show me the sales data by region"</li>
          <li>"What was our best performing month?"</li>
          <li>"Generate an error" (will show error handling)</li>
        </ul>
      </div>
    </div>
  );
}; 